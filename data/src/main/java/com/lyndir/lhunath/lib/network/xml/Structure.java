/*
 *   Copyright 2005-2007 Maarten Billemont
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
package com.lyndir.lhunath.lib.network.xml;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.validation.Schema;

import org.w3c.tidy.Tidy;

import com.lyndir.lhunath.lib.system.logging.Logger;

/**
 * <i>Structure - A convenience class for parsing XML data into an object structure.</i><br>
 * <br>
 * The XML object structure generated by {@link #parse(String)} is based on {@link Document}.<br>
 * <br>
 * 
 * @author lhunath
 */
public class Structure {

    public static Tidy getTidyBuilder() {

        Tidy factory = new Tidy();
        factory.setXmlOut( true );
        factory.setQuiet( true );

        return factory;
    }

    public static DocumentBuilder getXMLBuilder() {

        return getXMLBuilder( false, true, false, false, false, false, false, null );
    }

    public static DocumentBuilder getXMLBuilder(Schema schema) {

        return getXMLBuilder( false, true, false, false, false, false, true, schema );
    }

    public static DocumentBuilder getXMLBuilder(boolean coalescing, boolean expandEntityRef, boolean ignoreComments,
            boolean whitespace, boolean awareness, boolean xIncludes, boolean validating, Schema schema) {

        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setCoalescing( coalescing );
            factory.setExpandEntityReferences( expandEntityRef );
            factory.setIgnoringComments( ignoreComments );
            factory.setIgnoringElementContentWhitespace( whitespace );
            factory.setNamespaceAware( awareness );
            factory.setXIncludeAware( xIncludes );
            factory.setValidating( validating );
            factory.setSchema( schema );

            return factory.newDocumentBuilder();
        }

        catch (ParserConfigurationException e) {
            Logger.error( e, "Document Builder has not been configured correctly!" );
        }

        return null;
    }
}
